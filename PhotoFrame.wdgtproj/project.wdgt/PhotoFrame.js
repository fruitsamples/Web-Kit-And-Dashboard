// This file was generated by Dashcode from Apple Computer, Inc.
// You may edit this file to customize your Dashboard widget.

// Global Variables
// 0: None
// 1: Color Monochrome
// 2: Sepia Tone	
// 3: Color Posterize
// 4: Dot Screen
// 5: CMYK Halftone
// 6: Edges
var EffectIndex = 2;
var request = null; // XMLHttpRequest Object
var URLs;
var count = 0;

function load()
{
	setupParts();
}

/* processURL(URL)
 * Reformat the supplied URL if needed
 */
function processURL(URL) {
	URL = URL.replace(/^(?:(?:feed|http):\/\/)?/, 'http://');
	URL = URL.replace(/photocast\.mac\.com/, 'web.mac.com');
	return URL;
}

/* getData()
 * Get the feed data from the supplied URL
 */
function getData() {
	// Get the URL from the textfield on the back of the widget
	var textfield = document.getElementById("textfield");
	if (textfield != null) {
		var URL = textfield.value;
		if ((URL != null) && (URL.length > 0)) {
			// Format the URL if needed
			URL = processURL(URL);
			// Create the XMLHttpRequest
			request = new XMLHttpRequest();
			request.onreadystatechange = processRequestChange;
			// Specify the mime type
			request.overrideMimeType("text/xml");	
			request.open("GET", URL, true);
			request.send(null);
		}
	}
}

/* processRequestChange()
 * Parse the response from the XMLHttpRequest if the data has been loaded
 */
function processRequestChange() {
    // Process the request only if the data has been loaded.
    if (request.readyState == 4) {
		parseResponse(request.responseXML);
    } 
}
/* parseResponse(doc)
 * Parse the response and pass the data to the Quartz Composition
 */
function parseResponse(doc) {
	if (doc) {
		var _URLs = null;
		
		// Get the local array of URLs
		_URLs = processiPhotoXML(doc);
		
		// Here we check to see if the new list of _URLs we have received is different
		// from the old list of URLs.  We use this information to reset our counter which
		// is used to advance the images we display each time the widget is shown.
		if (URLs) {
			var isChanged = false;
			if (URLs.length != _URLs.length)
				isChanged = true;
			else {
				for (i=0; i<URLs.length; ++i) {
					if (URLs[i] != _URLs[i]) {
						isChanged = true
						break;
					}
				}
			}	
			if (isChanged) {
				count = 0;
				URLs = _URLs;
			}
		} 
		else {
			URLs = _URLs;
		}
		
		if (URLs && (URLs.length>0)) {
			// Set the next URLs on each Quartz Composition
			var composition0 = document.getElementById("composition0");
			if (composition0) {
				composition0.setInputValue('EffectIndex' , EffectIndex);
				var index = (0+count) % URLs.length;
				composition0.setInputValue('URL', URLs[index]);
			}	
			var composition1 = document.getElementById("composition1");
			if (composition1) {
				composition1.setInputValue('EffectIndex' , EffectIndex);
				var index = (1+count) % URLs.length;
				composition1.setInputValue('URL', URLs[index]);	
			}
			var composition2 = document.getElementById("composition2");
			if (composition2) {
				composition2.setInputValue('EffectIndex' , EffectIndex);
				var index = (2+count) % URLs.length;
				composition2.setInputValue('URL', URLs[index]);
			}
		}	
	}
}

/* processiPhotoXML(doc)
 * Process the XML returned by the XMLHttpRequest from an iPhoto Photocast
 * Returns Array of URLs
 */
function processiPhotoXML(doc) {
		var URLs = new Array();

		// Get all of the enclosure tags
		var items = doc.getElementsByTagName("enclosure");
		
		// Get the URL of each enclosure and push it onto the URLs array
		for (i=0; i<items.length; ++i) {
			var _URL = items[i].getAttribute('url');
			URLs.push(_URL);
		}
		
		return URLs;
}


function remove()
{
	// your widget has just been removed from the layer
	// remove any preferences as needed
	// widget.setPreferenceForKey(null, "your-key");
}

function hide()
{
	// your widget has just been hidden stop any timers to
	// prevent cpu usage
	
	// Increment the counter used to advance the photos displayed in the widget	
	count++;	
	
	// Get all composition elements and pause or stop them
	var compositions = document.getElementsByTagName("embed");
	for (var f=0; f < compositions.length; f++) {
		if (compositions[f].type == "application/x-quartzcomposer" && !compositions[f].paused()) {
			if (attributes.pauseResume == 0)
				compositions[f].pause();
			else	
				compositions[f].stop();
		}
	}
}

function show()
{
	// your widget has just been shown.  restart any timers
	// and adjust your interface as needed
	
	// Get all composition elements and play them
	var compositions = document.getElementsByTagName("embed");
	for (var f=0; f < compositions.length; f++) {
		if (compositions[f].type == "application/x-quartzcomposer" && 
			(!compositions[f].playing() || compositions[f].paused())) {
			compositions[f].play();
		}
	}
	
	// Get the data from the data source and pass it to the Quartz Compositions
	getData();
}

function showBack(event)
{
	// your widget needs to show the back

	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget)
		widget.prepareForTransition("ToBack");

	front.style.display="none";
	back.style.display="block";
	
	if (window.widget)
		setTimeout('widget.performTransition();', 0);
}

function showFront(event)
{
	// your widget needs to show the front

	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget)
		widget.prepareForTransition("ToFront");

	front.style.display="block";
	back.style.display="none";
	
	if (window.widget)
		setTimeout('widget.performTransition();', 0);
		
	// Reload the composition with new data	
	setTimeout('getData();', 250);	
}

/*
 getLocalizedString() pulls a string out an array named localizedStrings.  Each language project directory in this widget contains a file named "localizedStrings.js", which, in turn, contains an array called localizedStrings.  This method queries the array of the file of whichever language has highest precedence, according to the International pane of System Preferences.
*/
function getLocalizedString(string)
{
	try { string = localizedStrings[string] || string; } catch (e) {}
	return string;
}

if (window.widget)
{
	widget.onremove = remove;
	widget.onhide = hide;
	widget.onshow = show;
}
